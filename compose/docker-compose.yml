version: '3'
services:
# ---------- Management ----------- #
  # PORTAINER
  portainer:
      image: portainer/portainer-ce
      # hostname: ${DOCKER_HOSTNAME}
      ports:
        - ${PORTAINER_PORT}:9000
      command: -H unix:///var/run/docker.sock
      container_name: portainer
      environment:
        - TZ=${TZ}
      logging:
        driver: json-file
        options:
          max-file: ${DOCKERLOGGING_MAXFILE}
          max-size: ${DOCKERLOGGING_MAXSIZE}
      restart: always
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /var/run/docker.sock:/var/run/docker.sock
        - ${DOCKER_CONFIG_DIR}/portainer:/data
        - ${DOCKER_STORAGE_DIR}:/storage

  # SPEEDTEST    
  speedtest:
    # hostname: ${DOCKER_HOSTNAME}
    container_name: speedtest
    image: henrywhitaker3/speedtest-tracker
    ports:
      - ${SPEEDTEST_PORT}:80
    volumes:
      - ${DOCKER_CONFIG_DIR}/speedtest:/config
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
      - OOKLA_EULA_GDPR=true
    logging:
      driver: "json-file"
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    restart: unless-stopped

  # GRAFANA 
  grafana:
    # hostname: ${DOCKER_HOSTNAME}
    container_name: grafana
    image: grafana/grafana-enterprise:8.2.0
    ports:
      - ${GRAFANA_PORT}:3000
  
  # NGINX
  nginx:
    #hostname: ${DOCKER_HOSTNAME}
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
    environment:
      DB_MYSQL_HOST: "db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
    volumes:
      - ${DOCKER_CONFIG_DIR}/nginx/data:/data
      - ${DOCKER_CONFIG_DIR}/nginx/letsencrypt:/etc/letsencrypt
    depends_on:
      - db

  # MARIA-DB
  db:
    # hostname: ${DOCKER_HOSTNAME}
    container_name: maria-db
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ${DOCKER_CONFIG_DIR}/maria-db/data/mysql:/var/lib/mysql
  
  # DASHY
  dashy:
    # hostname: ${DOCKER_HOSTNAME}
    container_name: dashy
    image: 'lissy93/dashy:latest'
    ports:
      - ${DASHY_PORT}:80
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
      - NODE_ENV=production
    restart: always 

# ---------- Media ----------- #
  # JACKETT
  jackett:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/jackett:/config
      - ${DOCKER_STORAGE_DIR}:/storage
    ports:
      - ${JACKETT_PORT}:9117
    restart: unless-stopped

  # RADARR
  radarr:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/radarr:/config
      - ${DOCKER_STORAGE_DIR}:/storage
      # - /path/to/movies:/movies #optional
      # - /path/to/downloadclient-downloads:/downloads #optional
    ports:
      - ${RADARR_PORT}:7878
    restart: unless-stopped

  #SONARR
  sonarr:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/sonarr:/config
      - ${DOCKER_STORAGE_DIR}:/storage
    ports:
      - ${SONARR_PORT}:8989
    restart: unless-stopped

  # LIDARR
  lidarr:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/lidarr:/config
      - ${DOCKER_STORAGE_DIR}:/storage #optional
      # - /path/to/downloads:/downloads #optional
    ports:
      - ${LIDARR_PORT}:8686
    restart: unless-stopped

  # BAZARR
  bazarr:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/bazarr/:/config
      - ${DOCKER_STORAGE_DIR}:/storage #optional
      # - /path/to/tv:/tv #optional
    ports:
      - ${BAZARR_PORT}:6767
    restart: unless-stopped

  # PROWLARR
  prowlarr:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/prowlarr:/config
      - ${DOCKER_STORAGE_DIR}:/storage
    ports:
      - ${PROWLARR_PORT}:9696
    restart: unless-stopped

  mylar3:
    image: lscr.io/linuxserver/mylar3:latest
    container_name: mylar3
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/mylar3:/config
      - ${DOCKER_STORAGE_DIR}/media/documents/graphic novels/comics:/comics
      - ${DOCKER_STORAGE_DIR}/downloads:/downloads
    ports:
      - ${MYLAR_PORT}:8090
    restart: unless-stopped

# ---------- Document ----------- #
  # LAZY LIBRARIAN
  lazylibrarian:
    # hostname: ${DOCKER_HOSTNAME}
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONFIG_DIR}/lazylibrarian:/config
      - ${DOCKER_STORAGE_DIR}:/storage
      # - /path/to/data/:/books #optional
    ports:
      - ${LAZYLIBRARIAN_PORT}:5299
    restart: unless-stopped

  # AUDIOBOOKSHELF
  audiobookshelf:
    # hostname: ${DOCKER_HOSTNAME}
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    ports:
      - ${AUDIOBOOKSHELF_PORT}:80
    volumes:
      # - </path/to/your/audiobooks>:/audiobooks
      # - </path/to/your/podcasts>:/podcasts
      - ${DOCKER_STORAGE_DIR}:/storage
      - ${DOCKER_CONFIG_DIR}/audiobookshelf:/config
      - ${DOCKER_CONFIG_DIR}/audiobookshelf/meta:/metadata
  
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_STORAGE_DIR}/media/documents:/config
    ports:
      - ${CALIBRE_PORT}:8080
      - ${CALIBRE_PORT_8081}:8081
    restart: unless-stopped

  # KAVITA
  kavita:
    image: kizaing/kavita:latest
    container_name: kavita
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_STORAGE_DIR}/media/documents/graphic novels/:/manga
      - ${DOCKER_STORAGE_DIR}/media/documents/books/:/books
      - ${DOCKER_CONFIG_DIR}/kavita:/kavita/config
    ports:
      - ${KAVITA_PORT}:5000
    restart: unless-stopped

  # PLEX
  pms-docker:
    image: plexinc/pms-docker
    # hostname: ${DOCKER_HOSTNAME}
    ports:
      - 1900:1900/udp
      - 3005:3005
      - 32400:32400
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
      - 33400:33400
      - 8324:8324
    container_name: plex
    # network_mode: host
    environment:
      - PGID=${DOCKER_GID}
      - PUID=${DOCKER_UID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    restart: always
    # ADVERTISE_IP: 192.168.9.115
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_CONFIG_DIR}/plex:/config
      - ${DOCKER_STORAGE_DIR}:/storage

# ---------- Utility ----------- #
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    ports:
      - ${VAULTWARDEN_PORT}:80
    restart: always
    environment:
      WEBSOCKET_ENABLED: "true"  # Enable WebSocket notifications.
    volumes:
      - ${DOCKER_CONFIG_DIR}/vaultwarden/vw-data:/data

